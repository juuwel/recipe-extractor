apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}
  labels:
    app: {{ .Release.Name }}

---
# Secret for credentials.  By defining this as stringData:
# instead of data: we can enter details here in plain text and
# it gets base64 encoded when added to the system.
#
# Leave unused variables defined, but empty ""
apiVersion: secrets.doppler.com/v1alpha1
kind: DopplerSecret
metadata:
  name: {{ .Release.Name }}-credentials
  namespace: {{ .Values.doppler.namespace }}
spec:
  tokenSecret:
    name: doppler-token-secret
    namespace: {{ .Values.doppler.namespace }}
  project: {{ .Values.doppler.project }}
  config: {{ .Values.doppler.config }}
  managedSecret:
    name: {{ .Release.Name }}-secret
    namespace: {{ .Values.namespace }}
    type: Opaque
  secrets:
    - NOTION_API_KEY
    - NOTION_DATABASE_ID
    - NOTION_VERSION
    - DATABASE_CONNECTION_STRING
    - WEBHOOK_SALT
    - WEBHOOK_SECRET_KEY
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-secret
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: db-storage
              mountPath: /app/data
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: db-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-db
